plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.2'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.google.protobuf' version '0.9.4'
}

group = 'com.bbebig'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2024.0.0")
}

dependencies {
	// 공통 모듈
	implementation project(":common-module")

	// Spring
	implementation platform("org.springframework.boot:spring-boot-dependencies:3.4.1")
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// Spring Cloud
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

	// Dotenv
	implementation 'io.github.cdimascio:java-dotenv:5.2.2'

	// Validation
	implementation 'jakarta.validation:jakarta.validation-api:3.0.2'

	// Lombok
	compileOnly 'org.projectlombok:lombok:1.18.28'
	annotationProcessor 'org.projectlombok:lombok:1.18.28'

	// Protobuf
	implementation 'com.google.protobuf:protobuf-java:3.21.12'

	// Kafka
	implementation 'org.springframework.kafka:spring-kafka'

	// redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

protobuf {
	protoc {
		artifact = "com.google.protobuf:protoc:3.21.12"
	}
	generatedFilesBaseDir = "$buildDir/generated"

	generateProtoTasks {
		all().forEach { task ->
			task.builtins {
				java {}
			}
		}
	}
}

sourceSets {
	main {
		proto {
			srcDir 'src/main/proto'
		}
		java {
			srcDirs += "$buildDir/generated/source/proto/main/java"
		}
	}
}

tasks.named("processResources") {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.named('test') {
	useJUnitPlatform()
}

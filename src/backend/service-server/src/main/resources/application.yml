server:
  port: 9020
  servlet:
    encoding:
      charset: UTF-8
      enabled: true
      force: true

spring:
  application:
    name: service-server
  datasource:
    url: jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_DATABASE}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect

  data:
    redis:
      port: 6379
      host: redis

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}

    topic:
      channel-chat-event: "channelChatEvent"
      dm-chat-event: "dmChatEvent"
      connection-event: "connectionEvent"
      presence-event: "presenceEvent"
      notification-event: "notificationEvent"
      server-event: "serverEvent"
      channel-event: "channelEvent"
      member-event: "memberEvent"

    producer:
      bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}

    consumer:
      group-id:
        channel-chat-event: "${spring.application.name}-channelChatEventGroup"
        dm-chat-event: "${spring.application.name}-dmChatEventGroup"
        notification-event: "${spring.application.name}-notificationEventGroup"
        server-event: "${spring.application.name}-serverEventGroup"
        channel-event: "${spring.application.name}-channelEventGroup"
        connection-event: "${spring.application.name}-connectionEventGroup"
        presence-event: "${spring.application.name}-presenceEventGroup"
        member-event: "${spring.application.name}-memberEventGroup"

      enable-auto-commit: true
      auto-offset-reset: latest

logging:
  level:
    org.springframework.jdbc: DEBUG # 운영 시에 WARN 변경
    org.apache.kafka: WARN
    org.springframework.kafka: WARN


eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://discovery-server:8761/eureka
  instance:
    instance-id: ${spring.cloud.client.ip-address}:${spring.application.instance_id:${random.value}}

springdoc:
  path: /swagger-ui/index.html
  swagger-ui:
    tags-sorter: alpha
    operations-sorter: method


resilience4j:
  circuitbreaker:
    configs:
      default:
        registerHealthIndicator: true
        failureRateThreshold: 80
        slowCallDurationThreshold: 10s
        waitDurationInOpenState: 20s
        permittedNumberOfCallsInHalfOpenState: 3
    instances:
      service-server:
        baseConfig: default

eas:
  passport:
    secretKey: ${PASSPORT_SECRET_KEY}
    expiration: ${PASSPORT_EXPIRATION}
    header: ${PASSPORT_HEADER}
    algorithm: ${PASSPORT_ALGORITHM}

auth:
  server:
    url: ${AUTH_SERVER_URL}

service:
  server:
    url: ${SERVICE_SERVER_URL}

management:
  endpoints:
    web:
      exposure:
        include: "health,info,metrics,prometheus,logfile"  # metrics 포함 확인
  metrics:
    enable:
      http: true  # HTTP 요청 메트릭 활성화
    tags:
      application: "bbebig-store"  # (선택) 태그 설정
  endpoint:
    metrics:
      enabled: true  # 특정 메트릭 엔드포인트 활성화


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model FRIEND {
  id                             BigInt         @id @default(autoincrement())
  from_user_id                   BigInt?
  to_user_id                     BigInt?
  status                         FRIEND_status?
  server_list                    Json?
  created_at                     DateTime?      @db.Timestamp(0)
  updated_at                     DateTime?      @db.Timestamp(0)
  USER_FRIEND_from_user_idToUSER USER?          @relation("FRIEND_from_user_idToUSER", fields: [from_user_id], references: [id], onDelete: Cascade, map: "friend_ibfk_1")
  USER_FRIEND_to_user_idToUSER   USER?          @relation("FRIEND_to_user_idToUSER", fields: [to_user_id], references: [id], onDelete: Cascade, map: "friend_ibfk_2")

  @@index([from_user_id], map: "from_user_id")
  @@index([to_user_id], map: "to_user_id")
}

model USER {
  id                               BigInt                       @id @default(autoincrement())
  name                             String?                      @db.VarChar(255)
  email                            String?                      @db.VarChar(255)
  password                         String?                      @db.VarChar(255)
  profile_img_url                  String?                      @db.VarChar(255)
  nickname                         String?                      @db.VarChar(255)
  custom_presence_status           USER_custom_presence_status?
  create_at                        DateTime?                    @db.Timestamp(0)
  update_at                        DateTime?                    @db.Timestamp(0)
  birthdate                        DateTime?                    @db.Timestamp(0)
  last_access_at                   DateTime?                    @db.Timestamp(0)
  FRIEND_FRIEND_from_user_idToUSER FRIEND[]                     @relation("FRIEND_from_user_idToUSER")
  FRIEND_FRIEND_to_user_idToUSER   FRIEND[]                     @relation("FRIEND_to_user_idToUSER")
}

enum FRIEND_status {
  ONLINE
  OFFLINE
  NOT_DISTURB
  INVISIBLE
}

enum USER_custom_presence_status {
  ONLINE
  OFFLINE
  NOT_DISTURB
  INVISIBLE
}
